\open Nat (suc zero)
\open Prelude (Bool (True False))
\open Prelude (List (::) nil)

\data Structure
  | trivial
  | spin (s : Bool)
  | pin (p : Int)

\data Circle (S : Structure)
  | base
  | loop

\func disjoint-union (S : Structure) (c1 c2 : Circle S) : Circle S \elim c1, c2
  | base, base => base
  | _, _ => loop

\func is-cobordant (S : Structure) (c1 c2 : Circle S) : Bool \elim c1, c2
  | base, base => True
  | loop, loop => True
  | _, _ => False

\func quotient-trivial (circles : List (Circle trivial)) : List (Circle trivial) \elim circles
  | nil => nil
  | _ => (base) :: nil

\func quotient-spin (circles : List (Circle (spin s))) : List (Circle (spin s)) \elim circles
  | nil => (base) :: (base) :: nil
  | _ => (base) :: (base) :: (loop) :: (loop) :: nil

\func quotient-pin (circles : List (Circle (pin p))) : List (Circle (pin p)) \elim circles
  | nil => (base) :: (base) :: (base) :: (base) :: nil
  | _ => (base) :: (base) :: (base) :: (base) :: (loop) :: (loop) :: (loop) :: (loop) :: nil

\func quotient (S : Structure) (circles : List (Circle S)) : List (Circle S) \elim S
  | trivial => quotient-trivial circles
  | spin s => quotient-spin circles
  | pin p => quotient-pin circles

\func Omega1 (S : Structure) : List (Circle S) \elim S
  | trivial => quotient trivial ((base) :: nil)
  | spin _ => quotient (spin true) ((base) :: (base) :: (loop) :: (loop) :: nil)
  | pin _ => quotient (pin 1) ((base) :: (base) :: (base) :: (base) :: (loop) :: (loop) :: (loop) :: (loop) :: nil)